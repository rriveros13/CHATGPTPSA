using System;
using System.Configuration;
using DevExpress.ExpressApp;
using DevExpress.Persistent.Base;
using DevExpress.ExpressApp.Security;
using DevExpress.ExpressApp.Web;
using DevExpress.Web;
using PDNOriginacion.Module;
using System.Collections.Generic;
using DevExpress.ExpressApp.Web.Editors.ASPx;
using PDNOriginacion.Module.BusinessObjects;

namespace PDNOriginacion.Web {
    public class Global : System.Web.HttpApplication {
        public Global() {
            InitializeComponent();
        }
        protected void Application_Start(Object sender, EventArgs e) {
<<<<<<< HEAD
            WebApplication.Instance.SetLanguage("es");
            WebApplication.Instance.SetFormattingCulture("es");
=======
            /*WebApplication.Instance.SetLanguage("es");
            WebApplication.Instance.SetFormattingCulture("es");*/
            //WebApplication.Instance.CustomizeLanguage += Instance_CustomizeLanguage;
>>>>>>> 03478e100aba33ed09e63ce379e669d3b6cec364
            SecurityAdapterHelper.Enable();
            ASPxWebControl.CallbackError += new EventHandler(Application_Error);
            Module.GetClienteUser.Register();
#if EASYTEST
            DevExpress.ExpressApp.Web.TestScripts.TestScriptsManager.EasyTestEnabled = true;
#endif
        }

        static void Instance_CustomizeFormattingCulture(
            object sender, CustomizeFormattingCultureEventArgs e) {
            e.FormattingCulture.NumberFormat.CurrencySymbol = "Gs";
        }

        protected void Session_Start(Object sender, EventArgs e) {
            Tracing.Initialize();
            ASPxCriteriaPropertyEditor.EnableReadOnlyParametersEditor = true;
            WebApplication.SetInstance(Session, new PDNOriginacionAspNetApplication());
            DevExpress.ExpressApp.Web.Templates.DefaultVerticalTemplateContentNew.ClearSizeLimit();
            WebApplication.Instance.SwitchToNewStyle();
            WebApplication.Instance.CustomizeFormattingCulture += Instance_CustomizeFormattingCulture;
            if(ConfigurationManager.ConnectionStrings["ConnectionString"] != null) {
                WebApplication.Instance.ConnectionString = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
            }
#if EASYTEST
            if(ConfigurationManager.ConnectionStrings["EasyTestConnectionString"] != null) {
                WebApplication.Instance.ConnectionString = ConfigurationManager.ConnectionStrings["EasyTestConnectionString"].ConnectionString;
            }
#endif
#if DEBUG
            if(System.Diagnostics.Debugger.IsAttached && WebApplication.Instance.CheckCompatibilityType == CheckCompatibilityType.DatabaseSchema) {
                WebApplication.Instance.DatabaseUpdateMode = DatabaseUpdateMode.UpdateDatabaseAlways;
            }
#endif

            ((SecurityStrategy)WebApplication.Instance.Security).CustomizeRequestProcessors +=
                delegate (object s, CustomizeRequestProcessorsEventArgs args) {
                List<IOperationPermission> result = new List<IOperationPermission>();
                SecurityStrategyComplex security = s as SecurityStrategyComplex;
                if (security != null)
                {
                    Usuario user = security.User as Usuario;
                    if (user != null)
                    {
                        foreach (Rol role in user.Roles)
                        {
                            if (role.CanExport)
                            {
                                result.Add(new ExportPermission());
                            }
                        }
                    }
                }
                IPermissionDictionary permissionDictionary = new PermissionDictionary((IEnumerable<IOperationPermission>)result);
                args.Processors.Add(typeof(ExportPermissionRequest), new ExportPermissionRequestProcessor(permissionDictionary));
            };

            WebApplication.Instance.Setup();
            WebApplication.Instance.Start();
        }
        protected void Application_BeginRequest(Object sender, EventArgs e) {
        }
        protected void Application_EndRequest(Object sender, EventArgs e) {
        }
        protected void Application_AuthenticateRequest(Object sender, EventArgs e) {
        }
        protected void Application_Error(Object sender, EventArgs e) {
            ErrorHandling.Instance.ProcessApplicationError();
        }
        protected void Session_End(Object sender, EventArgs e) {
            WebApplication.LogOff(Session);
            WebApplication.DisposeInstance(Session);
        }
        protected void Application_End(Object sender, EventArgs e) {
        }
        #region Web Form Designer generated code
        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent() {
        }
        #endregion
    }
}
